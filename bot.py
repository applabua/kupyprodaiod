import os
import logging
import asyncio
import nest_asyncio

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ event loop (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è Heroku/Jupyter)
nest_asyncio.apply()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
COLLECT, CONFIRM1, CONFIRM2 = range(3)

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
BOT_TOKEN = "7574826063:AAF4bq0_bvC1jSl0ynrWyaH_fGtyLi7j5Cw"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à Telegram ID)
ADMIN_ID = 2045410830

announcement_count = 0

# /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    image_url = "https://i.ibb.co/Y7k6mN9G/image.png"
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üòä –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å! üöÄ\n\n"
        "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç–∞ –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —Ç–∞ —à–≤–∏–¥–∫–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ‚Äî 200 –≥—Ä–Ω. üí∞\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ üì¢"
    )
    keyboard = [[InlineKeyboardButton("–†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢", callback_data="post_ad")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(
        photo=image_url,
        caption=welcome_text,
        reply_markup=reply_markup
    )
    return ConversationHandler.END

# –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
async def post_ad_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    instructions = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —É—Å—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (—É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É):\n"
        "üì∏ –§–æ—Ç–æ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)\n"
        "üìù –û–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üí∞ –¶—ñ–Ω–∞\n"
        "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "üë§ –Ü–º'—è\n\n"
        "–Ø–∫—â–æ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É, –ø–æ—Ç—ñ–º –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç –æ–∫—Ä–µ–º–æ.\n"
        "–í–≤–µ–¥—ñ—Ç—å /done, –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—è."
    )
    await query.message.reply_text(instructions)
    context.user_data["photo"] = None
    context.user_data["ad_text"] = ""
    return COLLECT

# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç)
async def collect_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.photo:
        photo_file = update.message.photo[-1]
        context.user_data["photo"] = photo_file.file_id
        caption = update.message.caption
        if caption:
            context.user_data["ad_text"] += ("\n" + caption) if context.user_data["ad_text"] else caption
        await update.message.reply_text("üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —â–µ —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ. –í–≤–µ–¥—ñ—Ç—å /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return COLLECT
    elif update.message.text:
        text = update.message.text.strip()
        if text.lower() == "/done":
            if not context.user_data["ad_text"] and not context.user_data["photo"]:
                await update.message.reply_text("‚ùóÔ∏è –í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return COLLECT
            return await show_confirmation_1(update, context)
        else:
            context.user_data["ad_text"] += ("\n" + text) if context.user_data["ad_text"] else text
            await update.message.reply_text("üìù –¢–µ–∫—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —â–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /done –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
            return COLLECT
    else:
        await update.message.reply_text("‚ùóÔ∏è –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ —Ñ–æ—Ç–æ –∞–±–æ —Ç–µ–∫—Å—Ç. –í–≤–µ–¥—ñ—Ç—å /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return COLLECT

# –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def show_confirmation_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    preview_text = (
        "–û—Å—å —â–æ –≤–∏ –Ω–∞–¥–∞–ª–∏:\n\n"
        f"{context.user_data['ad_text']}\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —á–∏ —Å–∫–∞—Å—É–π—Ç–µ:"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm1")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥üëá")
    if context.user_data["photo"]:
        await update.message.reply_photo(
            photo=context.user_data["photo"],
            caption=preview_text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(preview_text, reply_markup=reply_markup)
    return CONFIRM1

async def confirmation_handler_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "confirm1":
        return await show_confirmation_2(query, context)
    else:
        if query.message.photo:
            await query.edit_message_caption("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤—ñ–≤—à–∏ /start.")
        else:
            await query.edit_message_text("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤—ñ–≤—à–∏ /start.")
        return ConversationHandler.END

# –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def show_confirmation_2(query, context: ContextTypes.DEFAULT_TYPE) -> int:
    final_preview_text = (
        "–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
        f"{context.user_data['ad_text']}"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="publish")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–û—Å—å —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥üëá")
    if context.user_data["photo"]:
        await query.message.reply_photo(
            photo=context.user_data["photo"],
            caption=final_preview_text,
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(final_preview_text, reply_markup=reply_markup)
    return CONFIRM2

async def confirmation_handler_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "publish":
        global announcement_count
        announcement_count += 1
        admin_message = (
            "–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
            f"{context.user_data['ad_text']}\n\n"
            f"–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: tg://user?id={query.from_user.id}"
        )
        try:
            if context.user_data["photo"]:
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=context.user_data["photo"],
                    caption=admin_message
                )
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
        thanks_text = (
            "–î—è–∫—É—î–º–æ! –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. ü§ù\n"
            "–û—á—ñ–∫—É–π—Ç–µ ‚Äî –º–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è! üìû"
        )
        if query.message.photo:
            await query.edit_message_caption(thanks_text)
        else:
            await query.edit_message_text(thanks_text)
        return ConversationHandler.END
    else:
        if query.message.photo:
            await query.edit_message_caption("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –≤–≤—ñ–≤—à–∏ /start.")
        else:
            await query.edit_message_text("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –≤–≤—ñ–≤—à–∏ /start.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: /broadcast –∏ /stats
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    if context.args:
        message_to_broadcast = " ".join(context.args)
        CHANNEL_ID = -1001234567890  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
        try:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=message_to_broadcast)
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            await update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    else:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /broadcast.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å: {announcement_count}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (webhook –¥–ª—è Heroku –∏–ª–∏ polling)
async def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(post_ad_callback, pattern="^post_ad$"),
            CommandHandler("start", start),
        ],
        states={
            COLLECT: [MessageHandler(filters.TEXT | filters.PHOTO, collect_data)],
            CONFIRM1: [CallbackQueryHandler(confirmation_handler_1, pattern="^(confirm1|cancel)$")],
            CONFIRM2: [CallbackQueryHandler(confirmation_handler_2, pattern="^(publish|cancel)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True,
        per_message=True,
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("stats", stats))

    port = int(os.environ.get("PORT", "8443"))
    HEROKU_APP_NAME = os.environ.get("HEROKU_APP_NAME")
    if HEROKU_APP_NAME:
        webhook_url = f"https://{HEROKU_APP_NAME}.herokuapp.com/{BOT_TOKEN}"
        await application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url,
        )
    else:
        await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
