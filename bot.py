import os
import logging
import asyncio
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑–º–µ—â—ë–Ω –Ω–∞ GitHub: https://applabua.github.io/kupyprodaiod/

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
# –°–æ—Å—Ç–æ—è–Ω–∏—è: PHOTO, DESCRIPTION, TARIFF, PHONE, NAME, CONFIRMATION
PHOTO, DESCRIPTION, TARIFF, PHONE, NAME, CONFIRMATION = range(6)

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = "7574826063:AAF4bq0_bvC1jSl0ynrWyaH_fGtyLi7j5Cw"
ADMIN_ID = 2045410830

# –°—á—ë—Ç—á–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
announcement_count = 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton("–†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢", callback_data="post_ad")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å **¬´–ö—É–ø–∏/–ü—Ä–æ–¥–∞–π –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å¬ª** üõçÔ∏è\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∞–±–æ –ø—Ä–æ–¥–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–æ–≤–∞—Ä —á–∏ –ø–æ—Å–ª—É–≥—É —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return ConversationHandler.END

async def post_ad_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "üì∏ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (—è–∫—â–æ —î). –Ø–∫—â–æ —Ñ–æ—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skip"
    )
    return PHOTO

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    photo_file = update.message.photo[-1]
    context.user_data["photo"] = photo_file.file_id
    await update.message.reply_text("‚úèÔ∏è –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ —Ü—ñ–Ω—É:")
    return DESCRIPTION

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    context.user_data["photo"] = None
    await update.message.reply_text("‚úèÔ∏è –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ —Ü—ñ–Ω—É:")
    return DESCRIPTION

async def description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    context.user_data["description"] = update.message.text
    # –ó–∞–ø–∏—Ç –≤–∏–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ—É –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    keyboard = [
        [InlineKeyboardButton("–ó–≤–∏—á–∞–π–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (300 –≥—Ä–Ω)", callback_data="tariff_normal")],
        [InlineKeyboardButton("–¢–û–ü –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (500 –≥—Ä–Ω/24 –≥–æ–¥)", callback_data="tariff_top")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üí∞ –í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n"
        "‚Ä¢ –ó–≤–∏—á–∞–π–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ‚Äî 300 –≥—Ä–Ω\n"
        "‚Ä¢ –¢–û–ü –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ‚Äî 500 –≥—Ä–Ω –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä:",
        reply_markup=reply_markup
    )
    return TARIFF

async def tariff_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    if query.data == "tariff_normal":
        context.user_data["tariff"] = "–ó–≤–∏—á–∞–π–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (300 –≥—Ä–Ω)"
    elif query.data == "tariff_top":
        context.user_data["tariff"] = "–¢–û–ü –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (500 –≥—Ä–Ω/24 –≥–æ–¥)"
    await query.edit_message_text(
        text=f"–í–∏ –æ–±—Ä–∞–ª–∏: {context.user_data['tariff']}\n\nüìû –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
    )
    return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("üë§ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    return NAME

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ñ–º–µ–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    context.user_data["name"] = update.message.text

    summary = "üìã –û—Å—å –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
    summary += "üñº –§–æ—Ç–æ: " + ("‚úÖ" if context.user_data.get("photo") else "‚ùå") + "\n"
    summary += f"üìù –û–ø–∏—Å —Ç–∞ —Ü—ñ–Ω–∞: {context.user_data.get('description')}\n"
    summary += f"üí∞ –¢–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {context.user_data.get('tariff')}\n"
    summary += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}\n"
    summary += f"üë§ –Ü–º'—è: {context.user_data.get('name')}\n\n"
    summary += "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —á–∏ –≤—Å—ñ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ."
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRMATION

async def confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    if query.data == "confirm":
        global announcement_count
        announcement_count += 1

        message_text = "üÜï –ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
        message_text += "üñº –§–æ—Ç–æ: " + ("—î" if context.user_data.get("photo") else "–Ω–µ–º–∞—î") + "\n"
        message_text += f"üìù –û–ø–∏—Å —Ç–∞ —Ü—ñ–Ω–∞: {context.user_data.get('description')}\n"
        message_text += f"üí∞ –¢–∏–ø –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {context.user_data.get('tariff')}\n"
        message_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}\n"
        message_text += f"üë§ –Ü–º'—è: {context.user_data.get('name')}\n"

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        try:
            if context.user_data.get("photo"):
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=context.user_data.get("photo"),
                    caption=message_text,
                )
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text=message_text)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

        await query.edit_message_text("–î—è–∫—É—î–º–æ! –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ç–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ. üòä")
    else:
        await query.edit_message_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É /start.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    await update.message.reply_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. üòû", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /broadcast –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    if context.args:
        message_to_broadcast = " ".join(context.args)
        # –ó–ê–ú–Ü–ù–Ü–¢–¨ CHANNEL_ID –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π ID –∫–∞–Ω–∞–ª—É –∞–±–æ –≥—Ä—É–ø–∏, –∫—É–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        CHANNEL_ID = -1001234567890  
        try:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=message_to_broadcast)
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            await update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /broadcast")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å: {announcement_count}")

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(post_ad_callback, pattern="^post_ad$"),
            CommandHandler("start", start),
        ],
        states={
            PHOTO: [
                MessageHandler(filters.PHOTO, photo_handler),
                CommandHandler("skip", skip_photo),
            ],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, description_handler)
            ],
            TARIFF: [
                CallbackQueryHandler(tariff_callback, pattern="^(tariff_normal|tariff_top)$")
            ],
            PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)
            ],
            NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)
            ],
            CONFIRMATION: [
                CallbackQueryHandler(confirmation_handler, pattern="^(confirm|cancel)$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("stats", stats))

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ —á–µ—Ä–µ–∑ webhook –Ω–∞ Heroku
    port = int(os.environ.get("PORT", "8443"))
    HEROKU_APP_NAME = os.environ.get("HEROKU_APP_NAME")
    if HEROKU_APP_NAME:
        webhook_url = f"https://{HEROKU_APP_NAME}.herokuapp.com/{BOT_TOKEN}"
        await application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url,
        )
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ‚Äì polling
        await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
