import os
import logging
import asyncio
import nest_asyncio  # –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–ø—É—â–µ–Ω–æ–≥–æ event loop

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ nest_asyncio –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ event loop
nest_asyncio.apply()

# –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç –Ω–∞ GitHub:
# https://applabua.github.io/kupyprodaiod/

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ –¥—ñ–∞–ª–æ–≥—É (–æ–Ω–æ–≤–ª–µ–Ω–æ)
AD_DETAILS, CONFIRMATION1, CONFIRMATION2 = range(3)

# –î–∞–Ω—ñ –±–æ—Ç–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = "7574826063:AAF4bq0_bvC1jSl0ynrWyaH_fGtyLi7j5Cw"
ADMIN_ID = 2045410830

# –õ—ñ—á–∏–ª—å–Ω–∏–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å
announcement_count = 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é."""
    image_url = "https://i.ibb.co/Y7k6mN9G/image.png"
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üòä –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!\n\n"
        "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç–∞ –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —Ç–∞ —à–≤–∏–¥–∫–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ—à—Ç—É—î –ª–∏—à–µ 200 –≥—Ä–Ω. üõçÔ∏è\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏."
    )
    keyboard = [[InlineKeyboardButton("–†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢", callback_data="post_ad")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(photo=image_url, caption=welcome_text, reply_markup=reply_markup)
    return ConversationHandler.END

async def post_ad_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—É —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    prompt_text = (
        "üì£ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ) —Ç–∞ –≤–∫–∞–∑–∞—Ç–∏ –æ–ø–∏—Å, —Ü—ñ–Ω—É, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —ñ–º'—è "
        "—Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "–û–ø–∏—Å: –ü—Ä–æ–¥–∞—î—Ç—å—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥, 5000 –≥—Ä–Ω\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: 123456789\n"
        "–Ü–º'—è: –Ü–≤–∞–Ω\n"
        "–ü–æ—Å–∏–ª–∞–Ω–Ω—è: www.example.com\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."
    )
    await query.message.reply_text(prompt_text)
    return AD_DETAILS

async def ad_details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
    –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è file_id, –∞ —Ç–µ–∫—Å—Ç ‚Äì –∑ caption.
    –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ ‚Äì –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    if update.message.photo:
        photo_file = update.message.photo[-1]
        context.user_data["photo"] = photo_file.file_id
        ad_text = update.message.caption
        if not ad_text:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ç–∞–∫–æ–∂ —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É –æ–ø–∏—Å —Ñ–æ—Ç–æ.")
            return AD_DETAILS
    else:
        context.user_data["photo"] = None
        ad_text = update.message.text
    context.user_data["ad_text"] = ad_text
    summary = (
        "üìã –û—Å—å –≤–∞—à—ñ –¥–∞–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
        f"üñº –§–æ—Ç–æ: {'‚úÖ' if context.user_data['photo'] else '‚ùå'}\n"
        f"üìù –î–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {ad_text}\n"
        f"üí∞ –¶—ñ–Ω–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è: 200 –≥—Ä–Ω\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —á–∏ –≤—Å—ñ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ."
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm1")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRMATION1

async def confirmation1_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Äì –ø–æ–∫–∞–∑ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."""
    query = update.callback_query
    await query.answer()
    if query.data == "confirm1":
        preview = (
            "üÜï –ü—Ä–µ–≤'—é –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
            f"üìù {context.user_data.get('ad_text')}\n"
            f"üí∞ –¶—ñ–Ω–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è: 200 –≥—Ä–Ω"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="publish")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if context.user_data.get("photo"):
            await query.message.reply_photo(photo=context.user_data.get("photo"), caption=preview, reply_markup=reply_markup)
        else:
            await query.message.reply_text(preview, reply_markup=reply_markup)
        return CONFIRMATION2
    else:
        await query.edit_message_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start.")
        return ConversationHandler.END

async def confirmation2_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Äì –ø—ñ—Å–ª—è –Ω—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    query = update.callback_query
    await query.answer()
    if query.data == "publish":
        global announcement_count
        announcement_count += 1

        admin_message = (
            "üÜï –ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
            f"üìù –î–µ—Ç–∞–ª—ñ: {context.user_data.get('ad_text')}\n"
            f"üí∞ –¶—ñ–Ω–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è: 200 –≥—Ä–Ω\n"
            f"üîó –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: tg://user?id={update.effective_user.id}"
        )
        try:
            if context.user_data.get("photo"):
                await context.bot.send_photo(chat_id=ADMIN_ID, photo=context.user_data.get("photo"), caption=admin_message)
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
        await query.edit_message_text("–î—è–∫—É—î–º–æ! –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ. üòä")
        return ConversationHandler.END
    else:
        await query.edit_message_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    await update.message.reply_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. üòû", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ --- #

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /broadcast –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    if context.args:
        message_to_broadcast = " ".join(context.args)
        # –ó–∞–º—ñ–Ω—ñ—Ç—å CHANNEL_ID –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π ID –∫–∞–Ω–∞–ª—É –∞–±–æ –≥—Ä—É–ø–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        CHANNEL_ID = -1001234567890  
        try:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=message_to_broadcast)
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            await update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    else:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /broadcast.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å: {announcement_count}")

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(post_ad_callback, pattern="^post_ad$"),
            CommandHandler("start", start),
        ],
        states={
            AD_DETAILS: [MessageHandler(filters.TEXT | filters.PHOTO, ad_details_handler)],
            CONFIRMATION1: [CallbackQueryHandler(confirmation1_handler, pattern="^(confirm1|cancel)$")],
            CONFIRMATION2: [CallbackQueryHandler(confirmation2_handler, pattern="^(publish|cancel)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("stats", stats))

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è webhook –∞–±–æ polling
    port = int(os.environ.get("PORT", "8443"))
    HEROKU_APP_NAME = os.environ.get("HEROKU_APP_NAME")
    if HEROKU_APP_NAME:
        webhook_url = f"https://{HEROKU_APP_NAME}.herokuapp.com/{BOT_TOKEN}"
        await application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url,
            close_loop=False,
        )
    else:
        await application.run_polling(close_loop=False)

if __name__ == "__main__":
    asyncio.run(main())
