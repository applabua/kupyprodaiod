import os
import logging
import asyncio
import nest_asyncio

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ----------------------------------------------
# 1) –û–±—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ----------------------------------------------
nest_asyncio.apply()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
COLLECT, CONFIRM1, CONFIRM2 = range(3)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å —á–∏—Å–ª–∞, –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–≥–æ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º)
BROADCAST_TEXT = 10
BROADCAST_BUTTON_CHOICE = 11
BROADCAST_BUTTON_LABEL = 12
BROADCAST_BUTTON_URL = 13

# ==== –í–ê–ñ–ù–û! –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ ====
BOT_TOKEN = "7574826063:AAF4bq0_bvC1jSl0ynrWyaH_fGtyLi7j5Cw"

# ID –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥ /broadcast –∏ /stats)
ADMIN_ID = 2045410830

# –°—á—ë—Ç—á–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
announcement_count = 0

# ----------------------------------------------
# 2) –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ (–∫–∞–∫ –ø—Ä–µ–∂–¥–µ)
# ----------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢".
    """
    image_url = "https://i.ibb.co/Y7k6mN9G/image.png"
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üòä –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å! üöÄ\n\n"
        "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç–∞ –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —Ç–∞ —à–≤–∏–¥–∫–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ‚Äî 200 –≥—Ä–Ω. üí∞\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ üì¢"
    )
    keyboard = [[InlineKeyboardButton("–†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢", callback_data="post_ad")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_photo(
        photo=image_url,
        caption=welcome_text,
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def post_ad_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    instructions = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —É—Å—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (—É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É):\n"
        "üì∏ –§–æ—Ç–æ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)\n"
        "üìù –û–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "üí∞ –¶—ñ–Ω–∞\n"
        "üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "üë§ –Ü–º'—è\n\n"
        "–í–≤–µ–¥—ñ—Ç—å /done, –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—è."
    )
    context.user_data["photo"] = None
    context.user_data["ad_text"] = ""
    await query.message.reply_text(instructions)
    return COLLECT

async def collect_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç. –ü—Ä–∏ –≤–≤–æ–¥–µ /done –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.
    """
    if update.message.photo:
        photo_file = update.message.photo[-1]
        context.user_data["photo"] = photo_file.file_id

        caption = update.message.caption
        if caption:
            context.user_data["ad_text"] += ("\n" + caption) if context.user_data["ad_text"] else caption

        await update.message.reply_text("üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ç–µ–∫—Å—Ç —á–∏ —Ñ–æ—Ç–æ. /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return COLLECT

    elif update.message.text:
        text = update.message.text.strip()
        if text.lower() == "/done":
            if not context.user_data["ad_text"] and not context.user_data["photo"]:
                await update.message.reply_text("‚ùóÔ∏è –í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return COLLECT
            return await show_confirmation_1(update, context)
        else:
            context.user_data["ad_text"] += ("\n" + text) if context.user_data["ad_text"] else text
            await update.message.reply_text("üìù –¢–µ–∫—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —â–µ –∞–±–æ /done, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")
            return COLLECT

    else:
        await update.message.reply_text("‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–∏—à–µ —Ñ–æ—Ç–æ –∞–±–æ —Ç–µ–∫—Å—Ç. /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return COLLECT

async def show_confirmation_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    preview_text = (
        "–û—Å—å —â–æ –≤–∏ –Ω–∞–¥–∞–ª–∏:\n\n"
        f"{context.user_data['ad_text']}\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–∏ —Å–∫–∞—Å—É–≤–∞—Ç–∏?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm1")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    effective_message = update.message or update.effective_message
    await effective_message.reply_text("–û—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥üëá")
    if context.user_data["photo"]:
        await effective_message.reply_photo(
            photo=context.user_data["photo"],
            caption=preview_text,
            reply_markup=reply_markup
        )
    else:
        await effective_message.reply_text(preview_text, reply_markup=reply_markup)
    return CONFIRM1

async def confirmation_handler_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É) –∏–ª–∏ –æ—Ç–º–µ–Ω–∞.
    """
    query = update.callback_query
    await query.answer()
    if query.data == "confirm1":
        return await show_confirmation_2(query, context)
    else:
        if query.message.photo:
            await query.edit_message_caption("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start.")
        else:
            await query.edit_message_text("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start.")
        return ConversationHandler.END

async def show_confirmation_2(query, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ).
    """
    final_preview_text = (
        "–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
        f"{context.user_data['ad_text']}"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="publish")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–û—Å—å —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥üëá")
    if context.user_data["photo"]:
        await query.message.reply_photo(
            photo=context.user_data["photo"],
            caption=final_preview_text,
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(final_preview_text, reply_markup=reply_markup)
    return CONFIRM2

async def confirmation_handler_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å.
    """
    query = update.callback_query
    await query.answer()

    if query.data == "publish":
        global announcement_count
        announcement_count += 1
        admin_message = (
            "–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
            f"{context.user_data['ad_text']}\n\n"
            f"–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: tg://user?id={query.from_user.id}"
        )
        try:
            if context.user_data["photo"]:
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=context.user_data["photo"],
                    caption=admin_message
                )
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

        thanks_text = (
            "–î—è–∫—É—î–º–æ! –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. ü§ù\n"
            "–û—á—ñ–∫—É–π—Ç–µ ‚Äî –º–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è! üìû"
        )
        if query.message.photo:
            await query.edit_message_caption(thanks_text)
        else:
            await query.edit_message_text(thanks_text)
        return ConversationHandler.END
    else:
        if query.message.photo:
            await query.edit_message_caption("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ /start.")
        else:
            await query.edit_message_text("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ /start.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –æ—á–∏—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    effective_message = update.message or update.effective_message
    await effective_message.reply_text("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ----------------------------------------------
# 3) –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—Ä–æ–¥–∫–∞—Å—Ç–∞ –¥–ª—è ADMIN
# ----------------------------------------------
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")
    return BROADCAST_TEXT

async def broadcast_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞-—Å—Å–∏–ª–∫–∞.
    """
    text = update.message.text.strip()
    context.user_data["broadcast_text"] = text

    keyboard = [
        [InlineKeyboardButton("–¢–∞–∫", callback_data="button_yes")],
        [InlineKeyboardButton("–ù—ñ", callback_data="button_no")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º?", reply_markup=reply_markup)
    return BROADCAST_BUTTON_CHOICE

async def broadcast_button_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–µ—Ç.
    """
    query = update.callback_query
    await query.answer()
    if query.data == "button_yes":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏:")
        return BROADCAST_BUTTON_LABEL
    else:
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return await broadcast_final(update, context)

async def broadcast_button_label_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç URL –¥–ª—è –∫–Ω–æ–ø–∫–∏.
    """
    button_label = update.message.text.strip()
    context.user_data["broadcast_button_label"] = button_label
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    return BROADCAST_BUTTON_URL

async def broadcast_button_url_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª.
    """
    button_url = update.message.text.strip()
    context.user_data["broadcast_button_url"] = button_url
    return await broadcast_final(update, context)

async def broadcast_final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞.
    """
    # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
    CHANNEL_ID = 1002647717586  
    text = context.user_data.get("broadcast_text", "")
    # –ï—Å–ª–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞—ë–º —Ä–∞–∑–º–µ—Ç–∫—É
    if "broadcast_button_label" in context.user_data and "broadcast_button_url" in context.user_data:
        button_label = context.user_data["broadcast_button_label"]
        button_url = context.user_data["broadcast_button_url"]
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(button_label, url=button_url)]])
    else:
        reply_markup = None

    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, reply_markup=reply_markup)
        # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if update.callback_query:
            await update.callback_query.edit_message_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        else:
            await update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    return ConversationHandler.END

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    await update.message.reply_text("–†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ----------------------------------------------
# 4) –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∫ –ø—Ä–µ–∂–¥–µ)
# ----------------------------------------------
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ ADMIN_ID).
    """
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å: {announcement_count}")

# ----------------------------------------------
# 5) –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (webhook / polling)
# ----------------------------------------------
async def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(post_ad_callback, pattern="^post_ad$"),
            CommandHandler("start", start),
        ],
        states={
            COLLECT: [MessageHandler(filters.TEXT | filters.PHOTO, collect_data)],
            CONFIRM1: [CallbackQueryHandler(confirmation_handler_1, pattern="^(confirm1|cancel)$")],
            CONFIRM2: [CallbackQueryHandler(confirmation_handler_2, pattern="^(publish|cancel)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True
    )
    application.add_handler(conv_handler)

    # –î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (broadcast) —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏
    broadcast_handler = ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast_start)],
        states={
            BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_text_handler)],
            BROADCAST_BUTTON_CHOICE: [CallbackQueryHandler(broadcast_button_choice_handler, pattern="^(button_yes|button_no)$")],
            BROADCAST_BUTTON_LABEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_button_label_handler)],
            BROADCAST_BUTTON_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_button_url_handler)],
        },
        fallbacks=[CommandHandler("cancel", broadcast_cancel)],
        per_user=True,
        per_chat=True,
    )
    application.add_handler(broadcast_handler)

    application.add_handler(CommandHandler("stats", stats))

    port = int(os.environ.get("PORT", "8443"))
    HEROKU_APP_NAME = os.environ.get("HEROKU_APP_NAME")
    if HEROKU_APP_NAME:
        webhook_url = f"https://{HEROKU_APP_NAME}.herokuapp.com/{BOT_TOKEN}"
        await application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url,
        )
    else:
        await application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äì –∑–∞–ø—É—Å–∫ main() –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
if __name__ == "__main__":
    asyncio.run(main())
