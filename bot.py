import os
import logging
import asyncio
import nest_asyncio  # –¥–ª—è —É–Ω–µ–º–æ–∂–ª–∏–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–ø—É—â–µ–Ω–æ–≥–æ event loop

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ nest_asyncio –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ event loop
nest_asyncio.apply()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
AD_DETAILS, CONFIRMATION1, CONFIRMATION2 = range(3)

# –î–∞–Ω—ñ –±–æ—Ç–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = "7574826063:AAF4bq0_bvC1jSl0ynrWyaH_fGtyLi7j5Cw"
ADMIN_ID = 2045410830

# –õ—ñ—á–∏–ª—å–Ω–∏–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å
announcement_count = 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é
    —Ç–∞ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
    """
    image_url = "https://i.ibb.co/Y7k6mN9G/image.png"
    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! üòä –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å!\n\n"
        "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç–∞ –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è 200 –≥—Ä–Ω.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏."
    )
    keyboard = [[InlineKeyboardButton("–†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì¢", callback_data="post_ad")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_photo(
        photo=image_url,
        caption=welcome_text,
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def post_ad_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ ¬´–†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è¬ª.
    –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å–µ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:
    —Ñ–æ—Ç–æ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ), –æ–ø–∏—Å, —Ü—ñ–Ω—É, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ —ñ–º‚Äô—è.
    """
    query = update.callback_query
    await query.answer()

    instructions = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
        "‚Ä¢ –§–æ—Ç–æ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)\n"
        "‚Ä¢ –û–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "‚Ä¢ –¶—ñ–Ω—É\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "‚Ä¢ –Ü–º'—è\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "¬´–ü—Ä–æ–¥–∞—î—Ç—å—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥, 5000 –≥—Ä–Ω, –¢–µ–ª–µ—Ñ–æ–Ω: 123456789, –Ü–º'—è: –Ü–≤–∞–Ω¬ª.\n"
        "–Ø–∫—â–æ –¥–æ–¥–∞—î—Ç–µ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —É ¬´–ø—ñ–¥–ø–∏—Å—ñ¬ª –¥–æ —Ñ–æ—Ç–æ."
    )
    await query.message.reply_text(instructions)
    return AD_DETAILS


async def ad_details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ñ–æ—Ç–æ + –ø—ñ–¥–ø–∏—Å, –∞–±–æ –ª–∏—à–µ —Ç–µ–∫—Å—Ç).
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ user_data, –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–∫—Ä–∞–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    if update.message.photo:
        # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ
        photo_file = update.message.photo[-1]
        context.user_data["photo"] = photo_file.file_id
        ad_text = update.message.caption
        if not ad_text:
            await update.message.reply_text(
                "–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å (—Ç–µ–∫—Å—Ç) —É –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ."
            )
            return AD_DETAILS
    else:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ —Ç–µ–∫—Å—Ç
        context.user_data["photo"] = None
        ad_text = update.message.text

    context.user_data["ad_text"] = ad_text

    # –ü–µ—Ä—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Å–∫–æ—Ä–æ—Ç–∏–º–æ, –∞–ª–µ –ø–æ–∫–∞–∂–µ–º–æ —Ñ–æ—Ç–æ, —è–∫—â–æ —î)
    preview_text = (
        "–í–∏ –Ω–∞–¥–∞–ª–∏ —Ç–∞–∫—ñ –¥–∞–Ω—ñ:\n\n"
        f"{ad_text}\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–∏ —Å–∫–∞—Å—É–≤–∞—Ç–∏?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm1")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if context.user_data["photo"]:
        await update.message.reply_photo(
            photo=context.user_data["photo"],
            caption=preview_text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(preview_text, reply_markup=reply_markup)

    return CONFIRMATION1


async def confirmation_handler_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä—à–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –Ø–∫—â–æ ¬´–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ
    —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥ (–¥—Ä—É–≥–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è).
    """
    query = update.callback_query
    await query.answer()

    if query.data == "confirm1":
        # –§–æ—Ä–º—É—î–º–æ –ø—Ä–µ–≤‚Äô—é, —è–∫ –≤–æ–Ω–æ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –≤ –∫–∞–Ω–∞–ª—ñ:
        final_preview_text = (
            "–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
            f"{context.user_data.get('ad_text')}"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é", callback_data="publish")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥
        if context.user_data["photo"]:
            await query.message.reply_photo(
                photo=context.user_data["photo"],
                caption=final_preview_text,
                reply_markup=reply_markup
            )
        else:
            await query.message.reply_text(final_preview_text, reply_markup=reply_markup)

        return CONFIRMATION2
    else:
        # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
        await query.edit_message_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start.")
        return ConversationHandler.END


async def confirmation_handler_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É,
    –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É.
    """
    query = update.callback_query
    await query.answer()

    if query.data == "publish":
        global announcement_count
        announcement_count += 1

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = (
            "–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
            f"{context.user_data.get('ad_text')}\n\n"
            f"–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: tg://user?id={update.effective_user.id}"
        )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            if context.user_data["photo"]:
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=context.user_data["photo"],
                    caption=admin_message
                )
            else:
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        final_text = (
            "–î—è–∫—É—î–º–æ! –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.\n"
            "–û—á—ñ–∫—É–π—Ç–µ ‚Äî –º–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è."
        )
        await query.edit_message_text(final_text)
        return ConversationHandler.END
    else:
        # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
        await query.edit_message_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start.")
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í–∏—Ö—ñ–¥ –∑ —Ä–æ–∑–º–æ–≤–∏ / —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.
    """
    await update.message.reply_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# --- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ --- #

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /broadcast –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    if context.args:
        message_to_broadcast = " ".join(context.args)
        # –ó–∞–º—ñ–Ω—ñ—Ç—å CHANNEL_ID –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π ID –∫–∞–Ω–∞–ª—É –∞–±–æ –≥—Ä—É–ø–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
        CHANNEL_ID = -1001234567890
        try:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=message_to_broadcast)
            await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            await update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    else:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /broadcast.")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å: {announcement_count}")


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –∑–∞–ø—É—Å–∫–∞—î–º–æ—Å—è –Ω–∞ Heroku (webhook) —á–∏ –ª–æ–∫–∞–ª—å–Ω–æ (polling).
    """
    application = Application.builder().token(BOT_TOKEN).build()

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(post_ad_callback, pattern="^post_ad$"),
            CommandHandler("start", start),
        ],
        states={
            AD_DETAILS: [
                MessageHandler(filters.TEXT | filters.PHOTO, ad_details_handler),
            ],
            CONFIRMATION1: [
                CallbackQueryHandler(confirmation_handler_1, pattern="^(confirm1|cancel)$"),
            ],
            CONFIRMATION2: [
                CallbackQueryHandler(confirmation_handler_2, pattern="^(publish|cancel)$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("stats", stats))

    # –ó–∞–ø—É—Å–∫: webhook –∞–±–æ polling
    port = int(os.environ.get("PORT", "8443"))
    HEROKU_APP_NAME = os.environ.get("HEROKU_APP_NAME")
    if HEROKU_APP_NAME:
        webhook_url = f"https://{HEROKU_APP_NAME}.herokuapp.com/{BOT_TOKEN}"
        await application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url,
            close_loop=False,
        )
    else:
        await application.run_polling(close_loop=False)


if __name__ == "__main__":
    asyncio.run(main())
